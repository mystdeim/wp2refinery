#!/usr/bin/env ruby
require 'hpricot'
require 'trollop'
require 'sqlite3'
require 'cgi'
require 'time'

opts = Trollop::options do
  opt :file, "File to import", :required => true, :type => String
  opt :database, "Sqlite3 database", :required => true, :type => String
end

if opts[:database]
  db = SQLite3::Database.new(opts[:database])
end

post = {}
categories = []
users = []

# Parse XML
xml = Hpricot.XML(File.read(opts[:file]))

# Categories
xml.search('//wp:category').each do |category|
  categories << CGI.unescapeHTML(category.search('wp:cat_name').inner_text).gsub(/'/, "\\\\'")

  # Save categories
  if db
   db.execute("INSERT INTO blog_categories (title, created_at, updated_at) VALUES ('#{categories.last}', '#{Time.now}', '#{Time.now}')")
  end
end

# Users
xml.search('//dc:creator').each do |user|
  unless users.include?(user.inner_text)
    users << user.inner_text

    # Save users
    if db
      #db.execute("INSERT INTO users (username, created_at, updated_at) VALUES ('#{users.last}', '#{Time.now}', '#{Time.now}')")
    end
  end
end

# Post
xml.search("//item").each do |item|
  post = {}
  if item.search('wp:post_type').inner_html == "post"
    post[:post_id] = item.search("post_id").inner_html
    post[:title] = CGI.unescapeHTML(item.search("title").inner_html).gsub(/'/, "\\\\'")
    post[:link] = item.search("link").inner_html
    post[:published_at] = Time.parse(item.search("pubDate").inner_html)
    post[:created_at] = Time.parse(item.search("wp:post_date").inner_html)
    post[:post_date_gmt] = item.search("wp:post_date_gmt").inner_html
    post[:creator] = item.search("dc:creator").inner_text.gsub(/'/, "\\\\'")
    post[:content] = item.search("content:encoded").inner_text.gsub(/'/, "\\\\'")
    post[:excerpt] = item.search("excerpt:encoded").inner_text.gsub(/'/, "\\\\'")

    post[:wp_post_id] = item.search("wp:comment_status").inner_html
    post[:wp_ping_status] = item.search("wp:ping_status").inner_html
    post[:wp_post_name] = item.search("wp:post_name").inner_html
    post[:wp_status] = item.search("wp:status").inner_html
    post[:wp_post_parent] = item.search("wp:post_parent").inner_html
    post[:wp_menu_order] = item.search("wp:menu_order").inner_html
    post[:wp_post_type] = item.search("wp:post_type").inner_html
    post[:wp_is_sticky] = item.search("wp:is_sticky").inner_html

    # Meta
    item.search("wp:postmeta").each_with_index do |meta, index|
      post[:meta] ||= {}
      post[:meta][meta.search("wp:meta_key").inner_html] = meta.search("wp:meta_value").inner_html
    end

    # Categories
    post[:categories] = nil
    post[:categories] ||= []
    item.search("category").each_with_index do |category, index|
      unless post[:categories].include?(category.inner_text)
        post[:categories] << CGI.unescapeHTML(category.inner_text).gsub(/'/, "\\\\'")
      end
    end

    # Comments
    post[:comments] = nil
    item.search('wp:comment').each_with_index do |comment, index|
      unless comment.search('wp:comment_approved').inner_html == "spam"
        post[:comments] ||= {}
        post[:comments][index] ||= {}
        post[:comments][index][:id] = comment.search('wp:comment_id').inner_html
        post[:comments][index][:author] = CGI.escapeHTML(comment.search('wp:comment_author').inner_text).gsub(/'/, "\\\\'")
        post[:comments][index][:author_email] = comment.search('wp:comment_author_email').inner_html
        post[:comments][index][:author_url] = comment.search('wp:comment_author_url').inner_html
        post[:comments][index][:author_IP] = comment.search('wp:comment_author_IP').inner_html
        post[:comments][index][:comment_date] = Time.parse(comment.search('wp:comment_date').inner_html)
        post[:comments][index][:content] = CGI.unescapeHTML(comment.search('wp:comment_content').inner_text).gsub(/'/, "\\\\'")
        post[:comments][index][:approved] = comment.search('wp:comment_approved').inner_html
        post[:comments][index][:type] = comment.search('wp:comment_type').inner_html
        post[:comments][index][:parent] = comment.search('wp:comment_parent').inner_html
        post[:comments][index][:user_id] = comment.search('wp:comment_user_id').inner_html
      end
    end

    # Convert to paragraphs
    post[:content] = "<p>#{post[:content]}</p>"
    post[:content].gsub!(/(\r\n\r\n)/, "</p><p>")

    # Strip inline styles
    content = Hpricot(post[:content])
    content.search("[@style]").each do |e|
      unless e.empty?
        e.remove_attribute("style")
      end
    end
    post[:content] = content.inner_html

    # Hardcore database action
    if db
      unless post[:wp_status] == "auto-draft"
        # Get inserted user id
        user_id = db.execute("SELECT id FROM users WHERE username = '#{post[:creator]}'")
        user_id = user_id[0][0]

        # Convert draft status
        draft = 0
        if post[:wp_status] == "draft"
          draft = 1
        end

        if post[:post_date_gmt] == "0000-00-00 00:00:00"
          post[:published_at] = post[:created_at]
        end

        # Insert post
        #db.execute("INSERT INTO blog_posts (title, body, draft, published_at, created_at, updated_at, user_id) VALUES ('#{post[:title]}', '#{post[:content]}', '#{draft}', '#{post[:published_at]}', '#{post[:created_at]}', '#{Time.now}', '#{user_id.first["id"]}')")

        #puts
        #puts 'title:'+post[:title] +' content:'+ post[:content] +'draft:'+ draft.to_s + post[:published_at].to_s + post[:created_at].to_s + 'user:'+user_id.to_s
        #puts
        #db.execute("INSERT INTO blog_posts (title, body, draft, published_at, created_at, updated_at, user_id) VALUES ('#{post[:title]}', '#{post[:content]}', '#{draft.to_s}', '#{post[:published_at].to_s}', '#{post[:created_at].to_s}', '#{Time.now}', '#{user_id.to_s}')")
        db.execute("INSERT INTO blog_posts (title, body, draft, published_at, created_at, updated_at, user_id) VALUES (:title, :content, :draft, '#{post[:published_at]}', '#{post[:created_at]}', '#{Time.now}', :user_id)",
        :title => post[:title],
        :content => post[:content],
        :draft => draft.to_s,
        :user_id => user_id.to_s)

        #post_res = db.execute("SELECT id from blog_posts where title='#{post[:title]}' and body='#{post[:content]}' and draft='#{draft.to_s}' and published_at='#{post[:published_at].to_s}' and created_at='#{post[:created_at].to_s}' and  updated_at='#{Time.now.to_s}' and user_id=#{user_id.to_s}")
        post_res = db.execute("SELECT id from blog_posts where title=:title and body=:content and draft=:draft and published_at='#{post[:published_at]}' and created_at='#{post[:created_at]}' and user_id=:user_id",
        :title => post[:title],
        :content => post[:content],
        :draft => draft.to_s,
        :user_id => user_id.to_s)

        if post_res.count > 0
          post_id = post_res[0][0]
        else
          post_id = '0'
        end

        # Insert Comments
        unless post[:comments] == nil
          post[:comments].each do |comment|
            comment = comment.last
            if comment[:approved] == "1"
              comment[:approved] = "approved"
            else
              comment[:approved] = nil
            end

            db.execute("INSERT INTO blog_comments (blog_post_id, spam, name, email, body, state, created_at, updated_at) VALUES (:post_id, '0', :author, :author_email, :content, :approved, '#{comment[:comment_date]}', '#{Time.now}')",
            :post_id => post_id,
            :author => comment[:author],
            :author_email => comment[:author_email],
            :content => comment[:content],
            :approved => comment[:approved].to_s)
          end
        end

        # Associate categories
        post[:categories].each do |cat|
          blog_category_res = db.execute("SELECT id FROM blog_categories WHERE title = '#{cat}'")

          if blog_category_res.count > 0
            blog_category_id = blog_category_res[0][0]
            db.execute("INSERT INTO blog_categories_blog_posts (blog_category_id, blog_post_id) VALUES (#{blog_category_id}, #{post_id})")
          end
        end
      end
      p "#{post[:title]}"
    end

  elsif item.search('wp:post_type').inner_html == "attachment"
    # TODO: Attachments
  end

end

